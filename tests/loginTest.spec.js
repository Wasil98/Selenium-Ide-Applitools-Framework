// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const { Eyes, Target } = require('@applitools/eyes-selenium')
const { Configuration, VisualGridRunner, BrowserType, DeviceName, ScreenOrientation } = require('@applitools/eyes-selenium')

describe('loginTest', function() {
  this.timeout(120000)
  let driver
  let vars
  let eyes
  let preRenderHook
  beforeEach(async function() {
    // Load eyes.json configuration
    const eyesConfig = require('../config/eyes');

    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
    eyes = new Eyes(new VisualGridRunner())
    const config = new Configuration()
    config.setConcurrentSessions(10)

    // Set API Key from eyes.json
    config.setApiKey(eyesConfig.apiKey);

    config.addBrowser(1920, 1080, BrowserType.CHROME)
    config.addBrowser(2048, 1536, BrowserType.CHROME)
    config.addBrowser(750, 1334, BrowserType.CHROME)
    config.addBrowser(1920, 1080, BrowserType.SAFARI)
    config.addBrowser(2048, 1536, BrowserType.SAFARI)
    config.addBrowser(750, 1334, BrowserType.SAFARI)
    config.addBrowser(1920, 1080, BrowserType.FIREFOX)
    config.addBrowser(2048, 1536, BrowserType.FIREFOX)
    config.addBrowser(750, 1334, BrowserType.FIREFOX)
    config.addBrowser(1920, 1080, BrowserType.EDGECHROMIUM)
    config.addBrowser(2048, 1536, BrowserType.EDGECHROMIUM)
    config.addBrowser(750, 1334, BrowserType.EDGECHROMIUM)
    config.addDeviceEmulation(DeviceName.Galaxy_Note_4, ScreenOrientation.LANDSCAPE)
    config.addDeviceEmulation(DeviceName.iPad_6th_Gen, ScreenOrientation.LANDSCAPE)
    config.addDeviceEmulation(DeviceName.iPad_7th_Gen, ScreenOrientation.LANDSCAPE)
    config.addDeviceEmulation(DeviceName.iPhone_11_Pro_Max, ScreenOrientation.LANDSCAPE)
    config.addDeviceEmulation(DeviceName.Laptop_with_touch, ScreenOrientation.LANDSCAPE)
    eyes.setConfiguration(config)
    // eyes.setApiKey(process.env.APPLITOOLS_API_KEY || "4Q3R3f7NhKUy1vm97E0nFwgvPnkc4UF9oUEcX2EUpwHk110")
    await eyes.open(driver, "seleniumApplitoolsIntegration", "loginTest")
  })
  afterEach(async function() {
    await driver.quit();
    const results = await eyes.getRunner().getAllTestResults()
    console.log(results)
    eyes.abortIfNotClosed()
  })
  it('loginTest', async function() {
    await driver.get("https://www.saucedemo.com/")
    await driver.manage().window().setRect({ width: 1536, height: 835 })
    await eyes.check((new URL(await driver.getCurrentUrl())).pathname, Target.window().webHook(preRenderHook).fully(true))
    await driver.findElement(By.css("*[data-test=\"username\"]")).click()
    await driver.findElement(By.css("*[data-test=\"username\"]")).sendKeys("standard_user")
    await driver.findElement(By.css("*[data-test=\"password\"]")).click()
    await driver.findElement(By.css("*[data-test=\"password\"]")).sendKeys("secret_sauce")
    await driver.findElement(By.css("*[data-test=\"login-button\"]")).click()
    await eyes.check((new URL(await driver.getCurrentUrl())).pathname, Target.window().webHook(preRenderHook).fully(true))
    await driver.findElement(By.css("*[data-test=\"add-to-cart-sauce-labs-backpack\"]")).click()
    await eyes.close()
  })
})
